apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Security
    tekton.dev/displayName: Scan an image for vulnerabilities with Red Hat Advanced Cluster Security
    tekton.dev/pipelines.minVersion: 0.18.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: security
  name: rhacs-image-scan
  labels:
    app.kubernetes.io/version: '3.71'
spec:
  description: |-
    Scan an image with Red Hat Advanced Cluster Security.
    This task allows you to return full vulnerability scan results for an image in CSV, Table, or JSON formats. The companion rhacs-image-check task checks an image against build-time policies.
  params:
    - description: 'Name of secret containing the address:port tuple for RHACS Stackrox Central.'
      default: rox-central-endpoint
      name: rox_central_endpoint
      type: string
    - description: 'Name of secret containing the RHACS StackRox API token with CI permissions. Leave empty if you use another authentication mechanism. Example: rox-api-token.'
      default: ""
      name: rox_api_token
      type: string
    - description: Image providing the roxctl tool.
      default: 'quay.io/stackrox-io/roxctl:4.4.0'
      name: rox_image
      type: string
    - description: |
        Full name of image to scan.

        SHA 256 digest may be included to ensure scan of sequental runs with same tag.
        Examples: 'gcr.io/rox/sample:5.0-rc1', '$(params.IMAGE)', '$(params.IMAGE)@$(tasks.buildah.results.IMAGE_DIGEST)'
      default: $(params.IMAGE)
      name: image
      type: string
    - description: 'Results output format (json | csv | table).'
      default: json
      name: output_format
      type: string
    - description: |
        Do not verify TLS certificates.

        When set to "true", skip verifying the TLS certs of the Central endpoint and registry.
      default: 'false'
      name: insecure-skip-tls-verify
      type: string
  volumes:
    - name: token-vol
      projected:
        sources:
          - serviceAccountToken:
              audience: api
              expirationSeconds: 3600
              path: token
  workspaces:
    - name: roxctl-config
      description: The folder where the roxctl config should be stored
      mountPath: /roxctl-config
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
      - name: INSECURE
        value: $(params.insecure-skip-tls-verify)
      - name: ROX_CONFIG_DIR
        value: $(workspaces.roxctl-config.path)
      - name: ROX_CENTRAL_ENDPOINT
        valueFrom:
          secretKeyRef:
            key: rox_central_endpoint
            name: $(params.rox_central_endpoint)
  steps:
    - name: extract-serviceaccount-token
      image: python:latest
      volumeMounts:
        - mountPath: /service-account-token
          name: token-vol
      script: |
        #!/usr/bin/env bash
        set +x

        cat > configure_for_endpoint.py << EOF
        import argparse
        import datetime
        import os
        import os.path
        import requests
        import urllib3
        import yaml

        parser = argparse.ArgumentParser()
        parser.add_argument("-d", "--config-directory", type=str, default=os.environ['ROX_CONFIG_DIR'])
        parser.add_argument("-e", "--endpoint", type=str, default=os.environ['ROX_CENTRAL_ENDPOINT'])
        opts = parser.parse_args()

        urllib3.disable_warnings()

        service_account_token = ''
        with open('/service-account-token/token') as token_file:
          service_account_token = token_file.read()

        verify_ssl = True
        if os.environ['INSECURE'] == 'true':
          verify_ssl = False

        token_request = '{"idToken":"' + service_account_token + '"}'
        request_url = 'https://' + opts.endpoint + '/v1/auth/m2m/exchange'

        central_token = ''
        response = requests.post(request_url, data=token_request, verify=verify_ssl)
        if response.status_code == 200:
          rsp_json = response.json()
          if 'accessToken' in rsp_json:
            central_token = rsp_json['accessToken']

        # Update the roxctl config
        config = {}
        configpath = os.path.join(opts.config_directory, 'roxctl-config.yaml')
        if os.path.exists(configpath):
          with open(configpath) as f:
            config = yaml.safe_load(f)

        central_configs = {}
        centrals = 'centrals'
        if centrals in config:
          central_configs = config[centrals]
        else:
          config[centrals] = central_configs

        access_config = {
          'accessToken': central_token,
          'issuedAt': datetime.datetime.now(),
          'expiresAt': None,
          'refreshToken': ''
        }
        central_config = {
          'access': access_config
        }
        config[centrals][opts.endpoint] = central_config

        with open(configpath, 'w') as f:
          yaml.dump(config, f)
        EOF

        pip install pyyaml requests 2>/dev/null >/dev/null

        python configure_for_endpoint.py
    - name: rox-image-scan
      image: $(params.rox_image)
      env:
        - name: IMAGE
          value: $(params.image)
        - name: OUTPUT
          value: $(params.output_format)
        - name: ROX_API_TOKEN
          value: $(params.rox_api_token)
      args:
        - image
        - scan
        - '--endpoint=$(ROX_CENTRAL_ENDPOINT)'
        - '--insecure-skip-tls-verify=$(INSECURE)'
        - '--output=$(OUTPUT)'
        - '--image=$(IMAGE)'
