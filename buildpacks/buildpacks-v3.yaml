apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: buildpacks-v3
spec:
  inputs:
    params:
    - name: RUN_IMAGE
      description: The run image buildpacks will use as the base for IMAGE.
      default: packs/run:v3alpha2
    - name: BUILDER_IMAGE
      description: The builder image (must include v3 lifecycle and compatible buildpacks).
      default: packs/samples:v3alpha2
    - name: USE_CRED_HELPERS
      description: Use Docker credential helpers for Google's GCR, Amazon's ECR, or Microsoft's ACR.
      default: 'true'
    - name: CACHE
      description: The name of the persistent app cache volume
      default: empty-dir
    - name: USER_ID
      description: The user ID of the builder image user
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user
      default: "1000"

    resources:
    - name: source
      type: git

  outputs:
    resources:
    - name: image
      type: image

  steps:
  - name: prepare
    image: alpine
    command: ["/bin/sh"]
    args:
    - "-c"
    - >
      chown -R "${inputs.params.USER_ID}:${inputs.params.GROUP_ID}" "/builder/home" &&
      chown -R "${inputs.params.USER_ID}:${inputs.params.GROUP_ID}" /layers &&
      chown -R "${inputs.params.USER_ID}:${inputs.params.GROUP_ID}" /workspace
    volumeMounts:
    - name: "${inputs.params.CACHE}"
      mountPath: /layers

  - name: detect
    image: ${inputs.params.BUILDER_IMAGE}
    workingdir: /workspace/source
    command: ["/lifecycle/detector"]
    args:
    - "-app=."
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    volumeMounts:
    - name: "${inputs.params.CACHE}"
      mountPath: /layers

  - name: analyze
    image: ${inputs.params.BUILDER_IMAGE}
    workingdir: /workspace/source
    command: ["/lifecycle/analyzer"]
    args:
    - "-layers=/layers"
    - "-helpers=${inputs.params.USE_CRED_HELPERS}"
    - "-group=/layers/group.toml"
    - "${outputs.resources.image.url}"
    volumeMounts:
    - name: "${inputs.params.CACHE}"
      mountPath: /layers

  - name: build
    image: ${inputs.params.BUILDER_IMAGE}
    workingdir: /workspace/source
    command: ["/lifecycle/builder"]
    args:
    - "-layers=/layers"
    - "-app=."
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    volumeMounts:
    - name: "${inputs.params.CACHE}"
      mountPath: /layers

  - name: export
    image: ${inputs.params.BUILDER_IMAGE}
    workingdir: /workspace/source
    command: ["/lifecycle/exporter"]
    args:
    - "-layers=/layers"
    - "-helpers=${inputs.params.USE_CRED_HELPERS}"
    - "-app=."
    - "-image=${outputs.resources.image.url}"
    - "-group=/layers/group.toml"
    - "${outputs.resources.image.url}"
    volumeMounts:
    - name: "${inputs.params.CACHE}"
      mountPath: /layers

  volumes:
  - name: empty-dir
    emptyDir: {}
